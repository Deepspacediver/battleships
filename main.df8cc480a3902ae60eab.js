(()=>{var t={183:()=>{var t=document.querySelectorAll(".ship");Array.from(t).forEach((function(t){var e=Number(t.dataset.length);t.setAttribute("draggable","true"),t.dataset.alignment="horizontal";for(var r=0;r<e;r+=1){var n=document.createElement("div");n.classList.add("block"),t.appendChild(n)}}))},307:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",a=9007199254740991,o="[object Arguments]",i="[object Array]",c="[object Boolean]",u="[object Date]",s="[object Error]",l="[object Function]",f="[object Map]",d="[object Number]",h="[object Object]",v="[object Promise]",y="[object RegExp]",p="[object Set]",g="[object String]",m="[object Symbol]",b="[object WeakMap]",_="[object ArrayBuffer]",A="[object DataView]",S=/^\[object .+?Constructor\]$/,j=/^(?:0|[1-9]\d*)$/,w={};w["[object Float32Array]"]=w["[object Float64Array]"]=w["[object Int8Array]"]=w["[object Int16Array]"]=w["[object Int32Array]"]=w["[object Uint8Array]"]=w["[object Uint8ClampedArray]"]=w["[object Uint16Array]"]=w["[object Uint32Array]"]=!0,w[o]=w[i]=w[_]=w[c]=w[A]=w[u]=w[s]=w[l]=w[f]=w[d]=w[h]=w[y]=w[p]=w[g]=w[b]=!1;var L="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,E="object"==typeof self&&self&&self.Object===Object&&self,k=L||E||Function("return this")(),I=e&&!e.nodeType&&e,z=I&&t&&!t.nodeType&&t,O=z&&z.exports===I,P=O&&L.process,x=function(){try{return P&&P.binding&&P.binding("util")}catch(t){}}(),T=x&&x.isTypedArray;function q(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function M(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function B(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var C,N,D,$=Array.prototype,F=Function.prototype,U=Object.prototype,G=k["__core-js_shared__"],R=F.toString,V=U.hasOwnProperty,W=(C=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||""))?"Symbol(src)_1."+C:"",H=U.toString,Y=RegExp("^"+R.call(V).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),J=O?k.Buffer:void 0,K=k.Symbol,Q=k.Uint8Array,X=U.propertyIsEnumerable,Z=$.splice,tt=K?K.toStringTag:void 0,et=Object.getOwnPropertySymbols,rt=J?J.isBuffer:void 0,nt=(N=Object.keys,D=Object,function(t){return N(D(t))}),at=xt(k,"DataView"),ot=xt(k,"Map"),it=xt(k,"Promise"),ct=xt(k,"Set"),ut=xt(k,"WeakMap"),st=xt(Object,"create"),lt=Bt(at),ft=Bt(ot),dt=Bt(it),ht=Bt(ct),vt=Bt(ut),yt=K?K.prototype:void 0,pt=yt?yt.valueOf:void 0;function gt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function mt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function bt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function _t(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new bt;++e<r;)this.add(t[e])}function At(t){var e=this.__data__=new mt(t);this.size=e.size}function St(t,e){var r=Dt(t),n=!r&&Nt(t),a=!r&&!n&&$t(t),o=!r&&!n&&!a&&Vt(t),i=r||n||a||o,c=i?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=c.length;for(var s in t)!e&&!V.call(t,s)||i&&("length"==s||a&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Mt(s,u))||c.push(s);return c}function jt(t,e){for(var r=t.length;r--;)if(Ct(t[r][0],e))return r;return-1}function wt(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":tt&&tt in Object(t)?function(t){var e=V.call(t,tt),r=t[tt];try{t[tt]=void 0;var n=!0}catch(t){}var a=H.call(t);n&&(e?t[tt]=r:delete t[tt]);return a}(t):function(t){return H.call(t)}(t)}function Lt(t){return Rt(t)&&wt(t)==o}function Et(t,e,r,n,a){return t===e||(null==t||null==e||!Rt(t)&&!Rt(e)?t!=t&&e!=e:function(t,e,r,n,a,l){var v=Dt(t),b=Dt(e),S=v?i:qt(t),j=b?i:qt(e),w=(S=S==o?h:S)==h,L=(j=j==o?h:j)==h,E=S==j;if(E&&$t(t)){if(!$t(e))return!1;v=!0,w=!1}if(E&&!w)return l||(l=new At),v||Vt(t)?zt(t,e,r,n,a,l):function(t,e,r,n,a,o,i){switch(r){case A:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case _:return!(t.byteLength!=e.byteLength||!o(new Q(t),new Q(e)));case c:case u:case d:return Ct(+t,+e);case s:return t.name==e.name&&t.message==e.message;case y:case g:return t==e+"";case f:var l=M;case p:var h=1&n;if(l||(l=B),t.size!=e.size&&!h)return!1;var v=i.get(t);if(v)return v==e;n|=2,i.set(t,e);var b=zt(l(t),l(e),n,a,o,i);return i.delete(t),b;case m:if(pt)return pt.call(t)==pt.call(e)}return!1}(t,e,S,r,n,a,l);if(!(1&r)){var k=w&&V.call(t,"__wrapped__"),I=L&&V.call(e,"__wrapped__");if(k||I){var z=k?t.value():t,O=I?e.value():e;return l||(l=new At),a(z,O,r,n,l)}}if(!E)return!1;return l||(l=new At),function(t,e,r,n,a,o){var i=1&r,c=Ot(t),u=c.length,s=Ot(e).length;if(u!=s&&!i)return!1;var l=u;for(;l--;){var f=c[l];if(!(i?f in e:V.call(e,f)))return!1}var d=o.get(t);if(d&&o.get(e))return d==e;var h=!0;o.set(t,e),o.set(e,t);var v=i;for(;++l<u;){var y=t[f=c[l]],p=e[f];if(n)var g=i?n(p,y,f,e,t,o):n(y,p,f,t,e,o);if(!(void 0===g?y===p||a(y,p,r,n,o):g)){h=!1;break}v||(v="constructor"==f)}if(h&&!v){var m=t.constructor,b=e.constructor;m==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(h=!1)}return o.delete(t),o.delete(e),h}(t,e,r,n,a,l)}(t,e,r,n,Et,a))}function kt(t){return!(!Gt(t)||function(t){return!!W&&W in t}(t))&&(Ft(t)?Y:S).test(Bt(t))}function It(t){if(r=(e=t)&&e.constructor,n="function"==typeof r&&r.prototype||U,e!==n)return nt(t);var e,r,n,a=[];for(var o in Object(t))V.call(t,o)&&"constructor"!=o&&a.push(o);return a}function zt(t,e,r,n,a,o){var i=1&r,c=t.length,u=e.length;if(c!=u&&!(i&&u>c))return!1;var s=o.get(t);if(s&&o.get(e))return s==e;var l=-1,f=!0,d=2&r?new _t:void 0;for(o.set(t,e),o.set(e,t);++l<c;){var h=t[l],v=e[l];if(n)var y=i?n(v,h,l,e,t,o):n(h,v,l,t,e,o);if(void 0!==y){if(y)continue;f=!1;break}if(d){if(!q(e,(function(t,e){if(i=e,!d.has(i)&&(h===t||a(h,t,r,n,o)))return d.push(e);var i}))){f=!1;break}}else if(h!==v&&!a(h,v,r,n,o)){f=!1;break}}return o.delete(t),o.delete(e),f}function Ot(t){return function(t,e,r){var n=e(t);return Dt(t)?n:function(t,e){for(var r=-1,n=e.length,a=t.length;++r<n;)t[a+r]=e[r];return t}(n,r(t))}(t,Wt,Tt)}function Pt(t,e){var r,n,a=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?a["string"==typeof e?"string":"hash"]:a.map}function xt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return kt(r)?r:void 0}gt.prototype.clear=function(){this.__data__=st?st(null):{},this.size=0},gt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},gt.prototype.get=function(t){var e=this.__data__;if(st){var r=e[t];return r===n?void 0:r}return V.call(e,t)?e[t]:void 0},gt.prototype.has=function(t){var e=this.__data__;return st?void 0!==e[t]:V.call(e,t)},gt.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=st&&void 0===e?n:e,this},mt.prototype.clear=function(){this.__data__=[],this.size=0},mt.prototype.delete=function(t){var e=this.__data__,r=jt(e,t);return!(r<0)&&(r==e.length-1?e.pop():Z.call(e,r,1),--this.size,!0)},mt.prototype.get=function(t){var e=this.__data__,r=jt(e,t);return r<0?void 0:e[r][1]},mt.prototype.has=function(t){return jt(this.__data__,t)>-1},mt.prototype.set=function(t,e){var r=this.__data__,n=jt(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},bt.prototype.clear=function(){this.size=0,this.__data__={hash:new gt,map:new(ot||mt),string:new gt}},bt.prototype.delete=function(t){var e=Pt(this,t).delete(t);return this.size-=e?1:0,e},bt.prototype.get=function(t){return Pt(this,t).get(t)},bt.prototype.has=function(t){return Pt(this,t).has(t)},bt.prototype.set=function(t,e){var r=Pt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},_t.prototype.add=_t.prototype.push=function(t){return this.__data__.set(t,n),this},_t.prototype.has=function(t){return this.__data__.has(t)},At.prototype.clear=function(){this.__data__=new mt,this.size=0},At.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},At.prototype.get=function(t){return this.__data__.get(t)},At.prototype.has=function(t){return this.__data__.has(t)},At.prototype.set=function(t,e){var r=this.__data__;if(r instanceof mt){var n=r.__data__;if(!ot||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new bt(n)}return r.set(t,e),this.size=r.size,this};var Tt=et?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var r=-1,n=null==t?0:t.length,a=0,o=[];++r<n;){var i=t[r];e(i,r,t)&&(o[a++]=i)}return o}(et(t),(function(e){return X.call(t,e)})))}:function(){return[]},qt=wt;function Mt(t,e){return!!(e=null==e?a:e)&&("number"==typeof t||j.test(t))&&t>-1&&t%1==0&&t<e}function Bt(t){if(null!=t){try{return R.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ct(t,e){return t===e||t!=t&&e!=e}(at&&qt(new at(new ArrayBuffer(1)))!=A||ot&&qt(new ot)!=f||it&&qt(it.resolve())!=v||ct&&qt(new ct)!=p||ut&&qt(new ut)!=b)&&(qt=function(t){var e=wt(t),r=e==h?t.constructor:void 0,n=r?Bt(r):"";if(n)switch(n){case lt:return A;case ft:return f;case dt:return v;case ht:return p;case vt:return b}return e});var Nt=Lt(function(){return arguments}())?Lt:function(t){return Rt(t)&&V.call(t,"callee")&&!X.call(t,"callee")},Dt=Array.isArray;var $t=rt||function(){return!1};function Ft(t){if(!Gt(t))return!1;var e=wt(t);return e==l||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Ut(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=a}function Gt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Rt(t){return null!=t&&"object"==typeof t}var Vt=T?function(t){return function(e){return t(e)}}(T):function(t){return Rt(t)&&Ut(t.length)&&!!w[wt(t)]};function Wt(t){return null!=(e=t)&&Ut(e.length)&&!Ft(e)?St(t):It(t);var e}t.exports=function(t,e){return Et(t,e)}}},e={};function r(n){var a=e[n];if(void 0!==a)return a.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n](o,o.exports,r),o.loaded=!0,o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";r(183);var t=function(){for(var t=[],e=0;e<10;e++)for(var r=e,n=0;n<10;n++){var a=n;t.push([r,a])}return t}();const e=t;var n=document.getElementById("player-board"),a=document.getElementById("ai-board"),o=document.getElementById("place-ship-board");e.forEach((function(t){var e=document.createElement("div");e.classList.add("square"),e.dataset.x=t[0],e.dataset.y=t[1],n.appendChild(e);var r=e.cloneNode();a.appendChild(r);var i=e.cloneNode();o.appendChild(i)}));var i=r(307),c=r.n(i);const u=function(t,e){var r=0;return{getLength:function(){return t},getName:function(){return e},hit:function(){r+=1},getHitsTaken:function(){return r},isSunk:function(){return r>=t}}};var s=[[0,-1],[-1,-1],[1,-1],[-1,0],[1,0],[0,1],[-1,1],[1,1]],l=[{name:"destroyer",length:2},{name:"submarine",length:3},{name:"cruiser",length:3},{name:"battleship",length:4},{name:"carrier",length:5}];function f(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=h(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,a=function(){};return{s:a,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){c=!0,o=t},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw o}}}}function d(t){return function(t){if(Array.isArray(t))return v(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||h(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(t,e){if(t){if("string"==typeof t)return v(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?v(t,e):void 0}}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const y=function(){var t=d(e),r=[],n=new Set,a=new Set,o=function(t,e){return t.some((function(t){return c()(t,e)}))},i=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;t.forEach((function(n){for(var a=0;a<e.length;a++){var i=e[a],c=[n[0]+i[0],n[1]+i[1]];c[0]>=0&&c[0]<=9&&c[1]>=0&&c[1]<=9&&!1===o(t,c)&&r.add(String(c))}r.add(String(n))}))},h=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a,n=f(t);try{for(n.s();!(e=n.n()).done;){var o=e.value;if(r.has(String(o)))return!0}}catch(t){n.e(t)}finally{n.f()}return!1},v=function(t,e,n){var o={ship:u(t,e),coordinates:n};r.push(o),i(n,s,a)},y=function(t){var e,n=0,a=f(r);try{for(a.s();!(e=a.n()).done;){if(e.value.coordinates.some((function(e){return c()(t,e)})))return n;n+=1}}catch(t){a.e(t)}finally{a.f()}},p=function(t){return t.splice(Math.floor(Math.random()*t.length),1)},g=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["horizontal","vertical"];return t[Math.floor(2*Math.random())]},m=function(e,r){for(var n;void 0===n||a.has(String(n));)if("horizontal"===r){var o=t[Math.floor(Math.random()*(t.length-e))];o[1]+e<=10&&(n=o)}else{var i=t[Math.floor(Math.random()*(10*(e+1)))];i[0]+e<=10&&(n=i)}return n},b=function(t){for(var e=[];e.length<=1;){var r=g(),n=m(t,r);e.push(n);for(var a=1;a<t;a++)"horizontal"===r?e.push([n[0],n[1]+a]):e.push([n[0]+a,n[1]]);h(e)&&e.splice(0)}return i(e),e};return{shipList:r,placeShip:v,receiveAttack:function(t){var e=y(t);if(void 0!==e){var a=r[e];return a.ship.hit(),a.ship.isSunk()?{hit:!0,sunk:!0,coords:a.coordinates}:{hit:!0,sunk:!1,coords:null}}return n.add(String(t)),{hit:!1,sunk:!1,coords:null}},missedShots:n,areAllSunk:function(){return r.every((function(t){return t.ship.isSunk()}))},unavailableCoords:a,isInIllegalCoords:h,randomlyPlaceShips:function(){for(var t=[0,1,2,3,4];t.length;){var e=p(t),r=l[e],n=b(r.length);v(r.length,r.name,n)}}}};const p=function(t){return{getName:function(){return t},board:y(),attack:function(t,e){return t.board.receiveAttack(e)}}};function g(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return m(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return m(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,a=function(){};return{s:a,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){c=!0,o=t},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw o}}}}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var b=document.getElementById("player-board"),_=document.getElementById("ai-board"),A=document.getElementById("turn-display");const S=function(t){var r="realPlayer",n={realPlayer:p(t),AI:p("AI")},a=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"horizontal";return"horizontal"===r?t[1]+e>10:t[0]+e>10},o=e,i=function(){return r},c=function(){return r="realPlayer"===r?"ai":"realPlayer"},u=function(t){var e=t;A.textContent="realPlayer"===e?"computer's turn":"player's turn"},s=function(t,e){var r;r="realPlayer"===e?_:b,t.forEach((function(t){r.querySelector('[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')).classList.add("sunk")}))},l=function(t,e,r){var n,a=e.hit;e.sunk,e.coords;"realPlayer"===r?n=_.querySelector('.square[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')):"ai"===r&&(n=b.querySelector('.square[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]'))),!0===a?n.classList.add("hit"):n.classList.add("missed")},f=function(t){_.classList.remove("active");var e,r=(e=t.target,[Number(e.dataset.x),Number(e.dataset.y)]),a=n.realPlayer.attack(n.AI,r),o=i();u(o),l(r,a,o),!0===a.sunk&&s(a.coords,o),c()},d=function(){if(!n.AI.board.areAllSunk()){var t,e=i(),r=(t=o).splice(Math.floor(Math.random()*t.length),1).flat(),a=n.AI.attack(n.realPlayer,r);setTimeout((function(){l(r,a,e),!0===a.sunk&&s(a.coords,e)}),500),setTimeout((function(){u(e)}),700),setTimeout((function(){c(),_.classList.add("active")}),800)}};return{startAttack:function(t){t.target.classList.contains("missed")||t.target.classList.contains("hit")||"ai"===i()||n.AI.board.areAllSunk()||n.realPlayer.board.areAllSunk()||(f(t),d())},players:n,anchorAShip:function(t,e){if(!a(t,e.length,e.alignment)){var r=function(t,e){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"horizontal",n=[],a=0;a<e;a++)"horizontal"===r?n.push([t[0],t[1]+a]):n.push([t[0]+a,t[1]]);return n}(t,e.length,e.alignment),o=n.realPlayer.board;if(!function(t,e){var r,n=g(e);try{for(n.s();!(r=n.n()).done;)if(r.value.ship.getName()===t)return!0}catch(t){n.e(t)}finally{n.f()}return!1}(e.name,o.shipList)&&!o.isInIllegalCoords(r))return o.placeShip(e.length,e.name,r),r}},canStartGame:function(){return 5===n.realPlayer.board.shipList.length},isOutOfBounds:a,isGameOver:function(){return n.AI.board.areAllSunk()||n.realPlayer.board.areAllSunk()},getTurn:i}};var j=document.getElementById("ai-board"),w=document.getElementById("player-board"),L=document.getElementById("place-ship-board"),E=document.getElementById("ships-container"),k=document.querySelector("#start"),I=document.querySelector("#board-reset"),z=document.querySelector("#game-reset"),O=document.querySelector("#alignment-btn"),P=document.querySelector("#overlay"),x=document.querySelector("#board-creator"),T=document.querySelector("#gameover-display"),q=document.querySelector("#gameover-result"),M=S("test");O.addEventListener("click",(function(){var t=E.firstElementChild.dataset.alignment,e=Array.from(E.children);"horizontal"===t?(t="vertical",e.forEach((function(e){e.dataset.alignment=t,e.classList.add("vertical")}))):e.forEach((function(e){t="horizontal",e.dataset.alignment=t,e.classList.remove("vertical")}))}));var B=function(){x.classList.remove("active"),P.classList.remove("active"),j.classList.add("active"),M.players.realPlayer.board.shipList.forEach((function(t){t.coordinates.forEach((function(t){w.querySelector('[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')).classList.add("anchored")}))})),M.players.AI.board.randomlyPlaceShips(),j.addEventListener("mousedown",(function(t){!M.isGameOver()&&"ai"!==M.getTurn()&&t.target.classList.contains("square")&&(M.startAttack(t),M.isGameOver()&&(M.players.AI.board.areAllSunk()?q.textContent="You won":q.textContent="AI won",T.classList.add("active"),P.classList.add("active")))}))};k.addEventListener("click",(function(){M.canStartGame()&&B()})),E.addEventListener("dragstart",(function(t){t.target.classList.contains("ship")&&(t.dataTransfer.setData("ship-length",t.target.dataset.length),t.dataTransfer.setData("ship-name",t.target.id),t.dataTransfer.setData("ship-alignment",t.target.dataset.alignment))})),L.addEventListener("dragover",(function(t){"place-ship-board"===t.target.id||t.target.classList.contains("anchored")||(t.target.classList.add("dragover"),t.preventDefault())})),L.addEventListener("dragleave",(function(t){"place-ship-board"!==t.target.id&&(t.target.classList.remove("dragover"),t.preventDefault())}));L.addEventListener("drop",(function(t){t.target.classList.remove("dragover");var e={length:Number(t.dataTransfer.getData("ship-length")),name:t.dataTransfer.getData("ship-name"),alignment:t.dataTransfer.getData("ship-alignment")},r=[Number(t.target.dataset.x),Number(t.target.dataset.y)],n=M.anchorAShip(r,e);n&&(n.forEach((function(t){L.querySelector('[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')).classList.add("anchored")})),document.querySelector("#".concat(e.name)).classList.add("removed"))}));var C=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document,r=Array.from(e.querySelectorAll(".".concat(t)));r.forEach((function(e){return e.classList.remove(t)}))},N=function(){M=S("test"),C("anchored"),C("removed",E)};I.addEventListener("click",(function(){N()})),z.addEventListener("click",(function(){N(),C("hit"),C("missed"),C("sunk"),T.classList.remove("active"),x.classList.add("active")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,