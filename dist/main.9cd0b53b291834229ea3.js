(()=>{var n={970:()=>{var n=document.querySelectorAll(".ship");Array.from(n).forEach((function(n){var e=Number(n.dataset.length);n.setAttribute("draggable","true"),n.dataset.alignment="horizontal";for(var t=0;t<e;t+=1){var r=document.createElement("div");r.classList.add("block"),n.appendChild(r)}}))},369:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,'.modal {\n  color: var(--light-green);\n  background-image: linear-gradient(to right, #161616, #2e2e2e 10%, #161616);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  transition: transform 200ms ease-out;\n  background-color: var(--secondary);\n  z-index: 10;\n  border: 5px solid var(--secondary);\n  border-radius: 2rem;\n}\n.modal.active {\n  transform: translate(-50%, -50%) scale(1);\n}\n\n#overlay {\n  position: fixed;\n  opacity: 0;\n  transition: opactiy 200ms ease-out;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.8);\n  pointer-events: none;\n}\n\n#overlay.active {\n  opacity: 1;\n  pointer-events: all;\n}\n/*       SHIP FACTORY             */\n#board-creator.modal {\n  max-width: 90%;\n  width: 1000px;\n  max-height: 70%;\n  height: 700px;\n  display: grid;\n  grid-template-rows: 0.8fr 3fr 3fr 1.5fr;\n  align-items: center;\n  justify-items: center;\n}\n\nh2.board-creator-header {\n  font-size: 3rem;\n  font-family: "ArmaliteRifle";\n}\n#place-ship-board {\n  width: 300px;\n  height: 300px;\n}\n#ships-container {\n  max-width: 80%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n.ship {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: row;\n  box-shadow: 0px 0.3rem 0.2rem 3px rgba(0, 0, 0, 0.3);\n}\n.ship.vertical {\n  flex-direction: column !important;\n}\n.block {\n  border: 1px solid black;\n  height: 3rem;\n  width: 3rem;\n  background-color: #48bf91;\n}\n\n#start,\n#board-reset,\n#alignment-btn,\n#game-reset {\n  font-family: "Norwester";\n  text-transform: uppercase;\n  letter-spacing: 0.1rem;\n  padding: 1rem;\n  font-size: 1.7rem;\n  border-radius: 1rem;\n  border: 2px solid var(--secondary);\n  margin: 0.5rem;\n  cursor: pointer;\n  transition: filter, box-shadow 100ms ease-in;\n}\n\nbutton:hover {\n  filter: saturate(60%);\n  box-shadow: 0px 5px 16px 3px rgba(0, 0, 0, 0.4);\n}\n\nbutton:active {\n  transform: scale(0.93);\n}\n\n/* Game over modal */\n#gameover-display {\n  max-width: 50%;\n  max-height: 50%;\n  height: 300px;\n  width: 40rem;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5rem;\n}\n\nh3#gameover-result {\n  font-size: 4rem;\n}\n\nbutton#game-reset {\n  padding: 2rem;\n  font-size: 2.5rem;\n}\n\n@media (min-width: 860px) {\n  #board-creator.modal {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 0.8fr 5fr 1.5fr;\n    padding: 1rem;\n  }\n\n  h2.board-creator-header,\n  .buttons {\n    grid-column: span 2;\n  }\n  h2.board-creator-header {\n    font-size: 4rem;\n  }\n  #place-ship-board {\n    height: 40rem;\n    width: 40rem;\n  }\n  .block {\n    width: 4rem;\n    height: 4rem;\n  }\n}\n',"",{version:3,sources:["webpack://./src/styles/modals.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,0EAA0E;EAC1E,eAAe;EACf,QAAQ;EACR,SAAS;EACT,yCAAyC;EACzC,oCAAoC;EACpC,kCAAkC;EAClC,WAAW;EACX,kCAAkC;EAClC,mBAAmB;AACrB;AACA;EACE,yCAAyC;AAC3C;;AAEA;EACE,eAAe;EACf,UAAU;EACV,kCAAkC;EAClC,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,oCAAoC;EACpC,oBAAoB;AACtB;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB;AACA,mCAAmC;AACnC;EACE,cAAc;EACd,aAAa;EACb,eAAe;EACf,aAAa;EACb,aAAa;EACb,uCAAuC;EACvC,mBAAmB;EACnB,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,4BAA4B;AAC9B;AACA;EACE,YAAY;EACZ,aAAa;AACf;AACA;EACE,cAAc;EACd,aAAa;EACb,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;AACA;EACE,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,oDAAoD;AACtD;AACA;EACE,iCAAiC;AACnC;AACA;EACE,uBAAuB;EACvB,YAAY;EACZ,WAAW;EACX,yBAAyB;AAC3B;;AAEA;;;;EAIE,wBAAwB;EACxB,yBAAyB;EACzB,sBAAsB;EACtB,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,kCAAkC;EAClC,cAAc;EACd,eAAe;EACf,4CAA4C;AAC9C;;AAEA;EACE,qBAAqB;EACrB,+CAA+C;AACjD;;AAEA;EACE,sBAAsB;AACxB;;AAEA,oBAAoB;AACpB;EACE,cAAc;EACd,eAAe;EACf,aAAa;EACb,YAAY;;EAEZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE;IACE,8BAA8B;IAC9B,mCAAmC;IACnC,aAAa;EACf;;EAEA;;IAEE,mBAAmB;EACrB;EACA;IACE,eAAe;EACjB;EACA;IACE,aAAa;IACb,YAAY;EACd;EACA;IACE,WAAW;IACX,YAAY;EACd;AACF",sourcesContent:['.modal {\n  color: var(--light-green);\n  background-image: linear-gradient(to right, #161616, #2e2e2e 10%, #161616);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  transition: transform 200ms ease-out;\n  background-color: var(--secondary);\n  z-index: 10;\n  border: 5px solid var(--secondary);\n  border-radius: 2rem;\n}\n.modal.active {\n  transform: translate(-50%, -50%) scale(1);\n}\n\n#overlay {\n  position: fixed;\n  opacity: 0;\n  transition: opactiy 200ms ease-out;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.8);\n  pointer-events: none;\n}\n\n#overlay.active {\n  opacity: 1;\n  pointer-events: all;\n}\n/*       SHIP FACTORY             */\n#board-creator.modal {\n  max-width: 90%;\n  width: 1000px;\n  max-height: 70%;\n  height: 700px;\n  display: grid;\n  grid-template-rows: 0.8fr 3fr 3fr 1.5fr;\n  align-items: center;\n  justify-items: center;\n}\n\nh2.board-creator-header {\n  font-size: 3rem;\n  font-family: "ArmaliteRifle";\n}\n#place-ship-board {\n  width: 300px;\n  height: 300px;\n}\n#ships-container {\n  max-width: 80%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n.ship {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: row;\n  box-shadow: 0px 0.3rem 0.2rem 3px rgba(0, 0, 0, 0.3);\n}\n.ship.vertical {\n  flex-direction: column !important;\n}\n.block {\n  border: 1px solid black;\n  height: 3rem;\n  width: 3rem;\n  background-color: #48bf91;\n}\n\n#start,\n#board-reset,\n#alignment-btn,\n#game-reset {\n  font-family: "Norwester";\n  text-transform: uppercase;\n  letter-spacing: 0.1rem;\n  padding: 1rem;\n  font-size: 1.7rem;\n  border-radius: 1rem;\n  border: 2px solid var(--secondary);\n  margin: 0.5rem;\n  cursor: pointer;\n  transition: filter, box-shadow 100ms ease-in;\n}\n\nbutton:hover {\n  filter: saturate(60%);\n  box-shadow: 0px 5px 16px 3px rgba(0, 0, 0, 0.4);\n}\n\nbutton:active {\n  transform: scale(0.93);\n}\n\n/* Game over modal */\n#gameover-display {\n  max-width: 50%;\n  max-height: 50%;\n  height: 300px;\n  width: 40rem;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5rem;\n}\n\nh3#gameover-result {\n  font-size: 4rem;\n}\n\nbutton#game-reset {\n  padding: 2rem;\n  font-size: 2.5rem;\n}\n\n@media (min-width: 860px) {\n  #board-creator.modal {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 0.8fr 5fr 1.5fr;\n    padding: 1rem;\n  }\n\n  h2.board-creator-header,\n  .buttons {\n    grid-column: span 2;\n  }\n  h2.board-creator-header {\n    font-size: 4rem;\n  }\n  #place-ship-board {\n    height: 40rem;\n    width: 40rem;\n  }\n  .block {\n    width: 4rem;\n    height: 4rem;\n  }\n}\n'],sourceRoot:""}]);const s=i},890:(n,e,t)=>{"use strict";t.d(e,{Z:()=>v});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),s=t(667),c=t.n(s),A=new URL(t(141),t.b),l=new URL(t(762),t.b),u=new URL(t(590),t.b),d=new URL(t(551),t.b),f=i()(a()),p=c()(A),m=c()(l),h=c()(u),g=c()(d);f.push([n.id,'@font-face {\n  font-family: "Norwester";\n  src: url('+p+') format("woff2"),\n    url('+m+') format("woff");\n}\n@font-face {\n  font-family: "ArmaliteRifle";\n  src: url('+h+') format("woff2"),\n    url('+g+') format("woff");\n}\n\n:root {\n  --primary: #0e4b6c;\n  --secondary: #0a0a0a;\n  --tertiary: #155684;\n  --light-green: #48bf91;\n  --light-red: #e03333;\n  font-size: 10px;\n  font-family: "Norwester", sans-serif;\n  color: var(--light-green);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  /* Prevents from dragging selected text to droppable element */\n  user-select: none;\n}\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  background-image: linear-gradient(to right, #161616, #2e2e2e, #161616);\n  background-position: 50% 100%;\n  background-size: cover;\n  font-family: "Norwester";\n}\n\nheader {\n  padding: 1.5rem;\n  padding-left: 2.5rem;\n  display: flex;\n  align-items: center;\n}\nheader > h1 {\n  font-family: "ArmaliteRifle";\n  letter-spacing: 0.5rem;\n  font-size: 3.5rem;\n  padding: 0 1.5rem;\n  text-shadow: 0.4rem 0.4rem 0.2rem rgb(0, 0, 0);\n  transition: 100ms ease-in-out;\n  position: relative;\n}\nh1:after {\n  position: absolute;\n  content: "";\n  border-bottom: 2px solid var(--light-green);\n  top: 4rem;\n  left: 1rem; \n  width: 0;\n  transition: width cubic-bezier(.97,.03,.46,1.27) 400ms;\n}\n\nh1:hover:after{\n  width: 90%;\n}\n\nsvg.github-logo{\n  transition: transform ease-in 350ms;\n  width: 100%;\n  height: 35px;\n  fill: var(--light-green) !important;\n}\nsvg.github-logo:hover{\n  transform: rotate(360deg);\n  filter: saturate(10);\n}\nsvg.github-logo:active{\n  transform: scale(2);\n}\nmain {\n  width: 100%;\n  margin: 0 auto;\n  display: grid;\n  justify-items: center;\n  gap: 2rem;\n\n}\n#turn-display {\n  width: 80%;\n  font-size: 3rem;\n  text-align: center;\n  text-shadow: .6rem .6rem 1rem rgba(0, 0, 0, 0.9);\n}\n#player-board,\n#ai-board,\n#place-ship-board {\n  border: 0.5px solid black;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  margin: 0.5rem;\n  gap: 0.05rem;\n  box-shadow: 0px 1rem 2rem 3px rgba(0, 0, 0, 0.7);\n}\n\n#player-board,\n#ai-board {\n  width: 400px;\n  height: 400px;\n}\n\n\nbutton {\n  background-color: #282828;\n  /* box-shadow: -3px 3px var(--light-green), -2px 2px var(--light-green),\n    -1px 1px var(--light-green); */\n  color: var(--light-green);\n  font-size: 1rem;\n  font-weight: bold;\n}\n\n/* Board classes */\n.square {\n  border: 2px solid var(--secondary);\n  background-color: var(--tertiary);\n  position: relative;\n}\n.active > .square:hover {\n  background-color: #48bf91;\n  cursor: pointer;\n}\n.missed {\n  background-color: #8f8f8f;\n  pointer-events: none;\n}\n\n.anchored {\n  background-color: #48bf91;\n}\n\n.hit {\n  background-color: #e03333;\n  pointer-events: none;\n}\n.sunk::after{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%,-50%);\n  content: "X";\n  font-size: 2rem;\n  color: var(--secondary);\n}\n.dragover {\n  background-color: #48bf91;\n}\n.removed {\n  opacity: 0.2;\n}\n.outOfBounds {\n  background-color: gray;\n}\n\n.block {\n  border: 1px solid black;\n  width: 40px;\n}\n.hidden {\n  display: none;\n}\n\n\n\n@media (min-width:850px) {\n  main{\n    margin-top: 8rem;\n    grid-template-columns: 1fr 1fr;\n    align-content: center;\n  }\n\n  #turn-display{\n    grid-column: span 2;\n    grid-row-start: 1;\n    margin-bottom: 7rem;\n    font-size: 4rem;\n  }\n}\n\n\n@media (min-width:1220px) {\n  #player-board,\n  #ai-board {\n    width: 50rem;\n    height: 50rem;\n  }\n  header{\n    padding-left: 13rem;\n  }\n}',"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB;0DACsD;AACxD;AACA;EACE,4BAA4B;EAC5B;0DAC2D;AAC7D;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;EACnB,sBAAsB;EACtB,oBAAoB;EACpB,eAAe;EACf,oCAAoC;EACpC,yBAAyB;AAC3B;;AAEA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;EACtB,8DAA8D;EAC9D,iBAAiB;AACnB;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;EACZ,sEAAsE;EACtE,6BAA6B;EAC7B,sBAAsB;EACtB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;EACf,oBAAoB;EACpB,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,iBAAiB;EACjB,iBAAiB;EACjB,8CAA8C;EAC9C,6BAA6B;EAC7B,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,2CAA2C;EAC3C,SAAS;EACT,UAAU;EACV,QAAQ;EACR,sDAAsD;AACxD;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,mCAAmC;EACnC,WAAW;EACX,YAAY;EACZ,mCAAmC;AACrC;AACA;EACE,yBAAyB;EACzB,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,cAAc;EACd,aAAa;EACb,qBAAqB;EACrB,SAAS;;AAEX;AACA;EACE,UAAU;EACV,eAAe;EACf,kBAAkB;EAClB,gDAAgD;AAClD;AACA;;;EAGE,yBAAyB;EACzB,aAAa;EACb,sCAAsC;EACtC,cAAc;EACd,YAAY;EACZ,gDAAgD;AAClD;;AAEA;;EAEE,YAAY;EACZ,aAAa;AACf;;;AAGA;EACE,yBAAyB;EACzB;kCACgC;EAChC,yBAAyB;EACzB,eAAe;EACf,iBAAiB;AACnB;;AAEA,kBAAkB;AAClB;EACE,kCAAkC;EAClC,iCAAiC;EACjC,kBAAkB;AACpB;AACA;EACE,yBAAyB;EACzB,eAAe;AACjB;AACA;EACE,yBAAyB;EACzB,oBAAoB;AACtB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;EACzB,oBAAoB;AACtB;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,+BAA+B;EAC/B,YAAY;EACZ,eAAe;EACf,uBAAuB;AACzB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,YAAY;AACd;AACA;EACE,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,WAAW;AACb;AACA;EACE,aAAa;AACf;;;;AAIA;EACE;IACE,gBAAgB;IAChB,8BAA8B;IAC9B,qBAAqB;EACvB;;EAEA;IACE,mBAAmB;IACnB,iBAAiB;IACjB,mBAAmB;IACnB,eAAe;EACjB;AACF;;;AAGA;EACE;;IAEE,YAAY;IACZ,aAAa;EACf;EACA;IACE,mBAAmB;EACrB;AACF",sourcesContent:['@font-face {\n  font-family: "Norwester";\n  src: url("../assets/fonts/norwester.woff2") format("woff2"),\n    url("../assets/fonts/norwester.woff") format("woff");\n}\n@font-face {\n  font-family: "ArmaliteRifle";\n  src: url("../assets/fonts/armalite_rifle.woff2") format("woff2"),\n    url("../assets/fonts/armalite_rifle.woff") format("woff");\n}\n\n:root {\n  --primary: #0e4b6c;\n  --secondary: #0a0a0a;\n  --tertiary: #155684;\n  --light-green: #48bf91;\n  --light-red: #e03333;\n  font-size: 10px;\n  font-family: "Norwester", sans-serif;\n  color: var(--light-green);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  /* Prevents from dragging selected text to droppable element */\n  user-select: none;\n}\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  background-image: linear-gradient(to right, #161616, #2e2e2e, #161616);\n  background-position: 50% 100%;\n  background-size: cover;\n  font-family: "Norwester";\n}\n\nheader {\n  padding: 1.5rem;\n  padding-left: 2.5rem;\n  display: flex;\n  align-items: center;\n}\nheader > h1 {\n  font-family: "ArmaliteRifle";\n  letter-spacing: 0.5rem;\n  font-size: 3.5rem;\n  padding: 0 1.5rem;\n  text-shadow: 0.4rem 0.4rem 0.2rem rgb(0, 0, 0);\n  transition: 100ms ease-in-out;\n  position: relative;\n}\nh1:after {\n  position: absolute;\n  content: "";\n  border-bottom: 2px solid var(--light-green);\n  top: 4rem;\n  left: 1rem; \n  width: 0;\n  transition: width cubic-bezier(.97,.03,.46,1.27) 400ms;\n}\n\nh1:hover:after{\n  width: 90%;\n}\n\nsvg.github-logo{\n  transition: transform ease-in 350ms;\n  width: 100%;\n  height: 35px;\n  fill: var(--light-green) !important;\n}\nsvg.github-logo:hover{\n  transform: rotate(360deg);\n  filter: saturate(10);\n}\nsvg.github-logo:active{\n  transform: scale(2);\n}\nmain {\n  width: 100%;\n  margin: 0 auto;\n  display: grid;\n  justify-items: center;\n  gap: 2rem;\n\n}\n#turn-display {\n  width: 80%;\n  font-size: 3rem;\n  text-align: center;\n  text-shadow: .6rem .6rem 1rem rgba(0, 0, 0, 0.9);\n}\n#player-board,\n#ai-board,\n#place-ship-board {\n  border: 0.5px solid black;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  margin: 0.5rem;\n  gap: 0.05rem;\n  box-shadow: 0px 1rem 2rem 3px rgba(0, 0, 0, 0.7);\n}\n\n#player-board,\n#ai-board {\n  width: 400px;\n  height: 400px;\n}\n\n\nbutton {\n  background-color: #282828;\n  /* box-shadow: -3px 3px var(--light-green), -2px 2px var(--light-green),\n    -1px 1px var(--light-green); */\n  color: var(--light-green);\n  font-size: 1rem;\n  font-weight: bold;\n}\n\n/* Board classes */\n.square {\n  border: 2px solid var(--secondary);\n  background-color: var(--tertiary);\n  position: relative;\n}\n.active > .square:hover {\n  background-color: #48bf91;\n  cursor: pointer;\n}\n.missed {\n  background-color: #8f8f8f;\n  pointer-events: none;\n}\n\n.anchored {\n  background-color: #48bf91;\n}\n\n.hit {\n  background-color: #e03333;\n  pointer-events: none;\n}\n.sunk::after{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%,-50%);\n  content: "X";\n  font-size: 2rem;\n  color: var(--secondary);\n}\n.dragover {\n  background-color: #48bf91;\n}\n.removed {\n  opacity: 0.2;\n}\n.outOfBounds {\n  background-color: gray;\n}\n\n.block {\n  border: 1px solid black;\n  width: 40px;\n}\n.hidden {\n  display: none;\n}\n\n\n\n@media (min-width:850px) {\n  main{\n    margin-top: 8rem;\n    grid-template-columns: 1fr 1fr;\n    align-content: center;\n  }\n\n  #turn-display{\n    grid-column: span 2;\n    grid-row-start: 1;\n    margin-bottom: 7rem;\n    font-size: 4rem;\n  }\n}\n\n\n@media (min-width:1220px) {\n  #player-board,\n  #ai-board {\n    width: 50rem;\n    height: 50rem;\n  }\n  header{\n    padding-left: 13rem;\n  }\n}'],sourceRoot:""}]);const v=f},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},667:n=>{"use strict";n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},307:(n,e,t)=>{n=t.nmd(n);var r="__lodash_hash_undefined__",a=9007199254740991,o="[object Arguments]",i="[object Array]",s="[object Boolean]",c="[object Date]",A="[object Error]",l="[object Function]",u="[object Map]",d="[object Number]",f="[object Object]",p="[object Promise]",m="[object RegExp]",h="[object Set]",g="[object String]",v="[object WeakMap]",C="[object ArrayBuffer]",b="[object DataView]",y=/^\[object .+?Constructor\]$/,E=/^(?:0|[1-9]\d*)$/,B={};B["[object Float32Array]"]=B["[object Float64Array]"]=B["[object Int8Array]"]=B["[object Int16Array]"]=B["[object Int32Array]"]=B["[object Uint8Array]"]=B["[object Uint8ClampedArray]"]=B["[object Uint16Array]"]=B["[object Uint32Array]"]=!0,B[o]=B[i]=B[C]=B[s]=B[b]=B[c]=B[A]=B[l]=B[u]=B[d]=B[f]=B[m]=B[h]=B[g]=B[v]=!1;var x="object"==typeof t.g&&t.g&&t.g.Object===Object&&t.g,w="object"==typeof self&&self&&self.Object===Object&&self,_=x||w||Function("return this")(),k=e&&!e.nodeType&&e,S=k&&n&&!n.nodeType&&n,j=S&&S.exports===k,z=j&&x.process,I=function(){try{return z&&z.binding&&z.binding("util")}catch(n){}}(),L=I&&I.isTypedArray;function O(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}function T(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}function D(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}var P,q,U,Y=Array.prototype,M=Function.prototype,N=Object.prototype,R=_["__core-js_shared__"],Z=M.toString,W=N.hasOwnProperty,F=(P=/[^.]+$/.exec(R&&R.keys&&R.keys.IE_PROTO||""))?"Symbol(src)_1."+P:"",$=N.toString,G=RegExp("^"+Z.call(W).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),X=j?_.Buffer:void 0,Q=_.Symbol,V=_.Uint8Array,H=N.propertyIsEnumerable,J=Y.splice,K=Q?Q.toStringTag:void 0,nn=Object.getOwnPropertySymbols,en=X?X.isBuffer:void 0,tn=(q=Object.keys,U=Object,function(n){return q(U(n))}),rn=jn(_,"DataView"),an=jn(_,"Map"),on=jn(_,"Promise"),sn=jn(_,"Set"),cn=jn(_,"WeakMap"),An=jn(Object,"create"),ln=On(rn),un=On(an),dn=On(on),fn=On(sn),pn=On(cn),mn=Q?Q.prototype:void 0,hn=mn?mn.valueOf:void 0;function gn(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}function vn(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}function Cn(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}function bn(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new Cn;++e<t;)this.add(n[e])}function yn(n){var e=this.__data__=new vn(n);this.size=e.size}function En(n,e){for(var t=n.length;t--;)if(Tn(n[t][0],e))return t;return-1}function Bn(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":K&&K in Object(n)?function(n){var e=W.call(n,K),t=n[K];try{n[K]=void 0;var r=!0}catch(n){}var a=$.call(n);return r&&(e?n[K]=t:delete n[K]),a}(n):function(n){return $.call(n)}(n)}function xn(n){return Nn(n)&&Bn(n)==o}function wn(n,e,t,r,a){return n===e||(null==n||null==e||!Nn(n)&&!Nn(e)?n!=n&&e!=e:function(n,e,t,r,a,l){var p=Pn(n),v=Pn(e),y=p?i:In(n),E=v?i:In(e),B=(y=y==o?f:y)==f,x=(E=E==o?f:E)==f,w=y==E;if(w&&qn(n)){if(!qn(e))return!1;p=!0,B=!1}if(w&&!B)return l||(l=new yn),p||Rn(n)?_n(n,e,t,r,a,l):function(n,e,t,r,a,o,i){switch(t){case b:if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case C:return!(n.byteLength!=e.byteLength||!o(new V(n),new V(e)));case s:case c:case d:return Tn(+n,+e);case A:return n.name==e.name&&n.message==e.message;case m:case g:return n==e+"";case u:var l=T;case h:var f=1&r;if(l||(l=D),n.size!=e.size&&!f)return!1;var p=i.get(n);if(p)return p==e;r|=2,i.set(n,e);var v=_n(l(n),l(e),r,a,o,i);return i.delete(n),v;case"[object Symbol]":if(hn)return hn.call(n)==hn.call(e)}return!1}(n,e,y,t,r,a,l);if(!(1&t)){var _=B&&W.call(n,"__wrapped__"),k=x&&W.call(e,"__wrapped__");if(_||k){var S=_?n.value():n,j=k?e.value():e;return l||(l=new yn),a(S,j,t,r,l)}}return!!w&&(l||(l=new yn),function(n,e,t,r,a,o){var i=1&t,s=kn(n),c=s.length;if(c!=kn(e).length&&!i)return!1;for(var A=c;A--;){var l=s[A];if(!(i?l in e:W.call(e,l)))return!1}var u=o.get(n);if(u&&o.get(e))return u==e;var d=!0;o.set(n,e),o.set(e,n);for(var f=i;++A<c;){var p=n[l=s[A]],m=e[l];if(r)var h=i?r(m,p,l,e,n,o):r(p,m,l,n,e,o);if(!(void 0===h?p===m||a(p,m,t,r,o):h)){d=!1;break}f||(f="constructor"==l)}if(d&&!f){var g=n.constructor,v=e.constructor;g==v||!("constructor"in n)||!("constructor"in e)||"function"==typeof g&&g instanceof g&&"function"==typeof v&&v instanceof v||(d=!1)}return o.delete(n),o.delete(e),d}(n,e,t,r,a,l))}(n,e,t,r,wn,a))}function _n(n,e,t,r,a,o){var i=1&t,s=n.length,c=e.length;if(s!=c&&!(i&&c>s))return!1;var A=o.get(n);if(A&&o.get(e))return A==e;var l=-1,u=!0,d=2&t?new bn:void 0;for(o.set(n,e),o.set(e,n);++l<s;){var f=n[l],p=e[l];if(r)var m=i?r(p,f,l,e,n,o):r(f,p,l,n,e,o);if(void 0!==m){if(m)continue;u=!1;break}if(d){if(!O(e,(function(n,e){if(i=e,!d.has(i)&&(f===n||a(f,n,t,r,o)))return d.push(e);var i}))){u=!1;break}}else if(f!==p&&!a(f,p,t,r,o)){u=!1;break}}return o.delete(n),o.delete(e),u}function kn(n){return function(n,e,t){var r=e(n);return Pn(n)?r:function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}(r,t(n))}(n,Zn,zn)}function Sn(n,e){var t,r,a=n.__data__;return("string"==(r=typeof(t=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t)?a["string"==typeof e?"string":"hash"]:a.map}function jn(n,e){var t=function(n,e){return null==n?void 0:n[e]}(n,e);return function(n){return!(!Mn(n)||function(n){return!!F&&F in n}(n))&&(Un(n)?G:y).test(On(n))}(t)?t:void 0}gn.prototype.clear=function(){this.__data__=An?An(null):{},this.size=0},gn.prototype.delete=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e},gn.prototype.get=function(n){var e=this.__data__;if(An){var t=e[n];return t===r?void 0:t}return W.call(e,n)?e[n]:void 0},gn.prototype.has=function(n){var e=this.__data__;return An?void 0!==e[n]:W.call(e,n)},gn.prototype.set=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=An&&void 0===e?r:e,this},vn.prototype.clear=function(){this.__data__=[],this.size=0},vn.prototype.delete=function(n){var e=this.__data__,t=En(e,n);return!(t<0||(t==e.length-1?e.pop():J.call(e,t,1),--this.size,0))},vn.prototype.get=function(n){var e=this.__data__,t=En(e,n);return t<0?void 0:e[t][1]},vn.prototype.has=function(n){return En(this.__data__,n)>-1},vn.prototype.set=function(n,e){var t=this.__data__,r=En(t,n);return r<0?(++this.size,t.push([n,e])):t[r][1]=e,this},Cn.prototype.clear=function(){this.size=0,this.__data__={hash:new gn,map:new(an||vn),string:new gn}},Cn.prototype.delete=function(n){var e=Sn(this,n).delete(n);return this.size-=e?1:0,e},Cn.prototype.get=function(n){return Sn(this,n).get(n)},Cn.prototype.has=function(n){return Sn(this,n).has(n)},Cn.prototype.set=function(n,e){var t=Sn(this,n),r=t.size;return t.set(n,e),this.size+=t.size==r?0:1,this},bn.prototype.add=bn.prototype.push=function(n){return this.__data__.set(n,r),this},bn.prototype.has=function(n){return this.__data__.has(n)},yn.prototype.clear=function(){this.__data__=new vn,this.size=0},yn.prototype.delete=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t},yn.prototype.get=function(n){return this.__data__.get(n)},yn.prototype.has=function(n){return this.__data__.has(n)},yn.prototype.set=function(n,e){var t=this.__data__;if(t instanceof vn){var r=t.__data__;if(!an||r.length<199)return r.push([n,e]),this.size=++t.size,this;t=this.__data__=new Cn(r)}return t.set(n,e),this.size=t.size,this};var zn=nn?function(n){return null==n?[]:(n=Object(n),function(e,t){for(var r=-1,a=null==e?0:e.length,o=0,i=[];++r<a;){var s=e[r];c=s,H.call(n,c)&&(i[o++]=s)}var c;return i}(nn(n)))}:function(){return[]},In=Bn;function Ln(n,e){return!!(e=null==e?a:e)&&("number"==typeof n||E.test(n))&&n>-1&&n%1==0&&n<e}function On(n){if(null!=n){try{return Z.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Tn(n,e){return n===e||n!=n&&e!=e}(rn&&In(new rn(new ArrayBuffer(1)))!=b||an&&In(new an)!=u||on&&In(on.resolve())!=p||sn&&In(new sn)!=h||cn&&In(new cn)!=v)&&(In=function(n){var e=Bn(n),t=e==f?n.constructor:void 0,r=t?On(t):"";if(r)switch(r){case ln:return b;case un:return u;case dn:return p;case fn:return h;case pn:return v}return e});var Dn=xn(function(){return arguments}())?xn:function(n){return Nn(n)&&W.call(n,"callee")&&!H.call(n,"callee")},Pn=Array.isArray,qn=en||function(){return!1};function Un(n){if(!Mn(n))return!1;var e=Bn(n);return e==l||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Yn(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=a}function Mn(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}function Nn(n){return null!=n&&"object"==typeof n}var Rn=L?function(n){return function(e){return n(e)}}(L):function(n){return Nn(n)&&Yn(n.length)&&!!B[Bn(n)]};function Zn(n){return null!=(e=n)&&Yn(e.length)&&!Un(e)?function(n,e){var t=Pn(n),r=!t&&Dn(n),a=!t&&!r&&qn(n),o=!t&&!r&&!a&&Rn(n),i=t||r||a||o,s=i?function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}(n.length,String):[],c=s.length;for(var A in n)!e&&!W.call(n,A)||i&&("length"==A||a&&("offset"==A||"parent"==A)||o&&("buffer"==A||"byteLength"==A||"byteOffset"==A)||Ln(A,c))||s.push(A);return s}(n):function(n){if(t=(e=n)&&e.constructor,e!==("function"==typeof t&&t.prototype||N))return tn(n);var e,t,r=[];for(var a in Object(n))W.call(n,a)&&"constructor"!=a&&r.push(a);return r}(n);var e}n.exports=function(n,e){return wn(n,e)}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=o[A]||0,u="".concat(A," ").concat(l);o[A]=l+1;var d=t(u),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=a(f,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},551:(n,e,t)=>{"use strict";n.exports=t.p+"302fc584d9900b0685e9.woff"},590:(n,e,t)=>{"use strict";n.exports=t.p+"20bfcf9741b71af68a82.woff2"},762:(n,e,t)=>{"use strict";n.exports=t.p+"5a69040702e076ed4452.woff"},141:(n,e,t)=>{"use strict";n.exports=t.p+"5f5e032828e75a6057b7.woff2"}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return n[r](o,o.exports,t),o.loaded=!0,o.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{"use strict";var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),A=t(216),l=t.n(A),u=t(589),d=t.n(u),f=t(890),p={};p.styleTagTransform=d(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=l(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var m=t(369),h={};h.styleTagTransform=d(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=l(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const g=function(){for(var n=[],e=0;e<10;e++)for(var t=e,r=0;r<10;r++){var a=r;n.push([t,a])}return n}();var v=document.getElementById("player-board"),C=document.getElementById("ai-board"),b=document.getElementById("place-ship-board");g.forEach((function(n){var e=document.createElement("div");e.classList.add("square"),e.dataset.x=n[0],e.dataset.y=n[1],v.appendChild(e);var t=e.cloneNode();C.appendChild(t);var r=e.cloneNode();b.appendChild(r)})),t(970);var y=t(307),E=t.n(y);const B=function(n,e){var t=0;return{getLength:function(){return n},getName:function(){return e},hit:function(){t+=1},getHitsTaken:function(){return t},isSunk:function(){return t>=n}}};var x=[[0,-1],[-1,-1],[1,-1],[-1,0],[1,0],[0,1],[-1,1],[1,1]],w=[{name:"destroyer",length:2},{name:"submarine",length:3},{name:"cruiser",length:3},{name:"battleship",length:4},{name:"carrier",length:5}];function _(n,e){var t="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=k(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var r=0,a=function(){};return{s:a,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return i=n.done,n},e:function(n){s=!0,o=n},f:function(){try{i||null==t.return||t.return()}finally{if(s)throw o}}}}function k(n,e){if(n){if("string"==typeof n)return S(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?S(n,e):void 0}}function S(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}const j=function(){var n,e=function(n){if(Array.isArray(n))return S(n)}(n=g)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||k(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),t=[],r=new Set,a=new Set,o=function(n,e){return n.some((function(n){return E()(n,e)}))},i=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:x,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;n.forEach((function(r){for(var a=0;a<e.length;a++){var i=e[a],s=[r[0]+i[0],r[1]+i[1]];s[0]>=0&&s[0]<=9&&s[1]>=0&&s[1]<=9&&!1===o(n,s)&&t.add(String(s))}t.add(String(r))}))},s=function(n){var e,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a,r=_(n);try{for(r.s();!(e=r.n()).done;){var o=e.value;if(t.has(String(o)))return!0}}catch(n){r.e(n)}finally{r.f()}return!1},c=function(n,e,r){var o={ship:B(n,e),coordinates:r};t.push(o),i(r,x,a)},A=function(n){return n.splice(Math.floor(Math.random()*n.length),1)},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["horizontal","vertical"];return n[Math.floor(2*Math.random())]},u=function(n,t){for(var r;void 0===r||a.has(String(r));)if("horizontal"===t){var o=e[Math.floor(Math.random()*(e.length-n))];o[1]+n<=10&&(r=o)}else{var i=e[Math.floor(Math.random()*(10*(n+1)))];i[0]+n<=10&&(r=i)}return r},d=function(n){for(var e=[];e.length<=1;){var t=l(),r=u(n,t);e.push(r);for(var a=1;a<n;a++)"horizontal"===t?e.push([r[0],r[1]+a]):e.push([r[0]+a,r[1]]);s(e)&&e.splice(0)}return i(e),e};return{shipList:t,placeShip:c,receiveAttack:function(n){var e=function(n){var e,r=0,a=_(t);try{for(a.s();!(e=a.n()).done;){if(e.value.coordinates.some((function(e){return E()(n,e)})))return r;r+=1}}catch(n){a.e(n)}finally{a.f()}}(n);if(void 0!==e){var a=t[e];return a.ship.hit(),a.ship.isSunk()?{hit:!0,sunk:!0,coords:a.coordinates}:{hit:!0,sunk:!1,coords:null}}return r.add(String(n)),{hit:!1,sunk:!1,coords:null}},missedShots:r,areAllSunk:function(){return t.every((function(n){return n.ship.isSunk()}))},unavailableCoords:a,isInIllegalCoords:s,randomlyPlaceShips:function(){for(var n=[0,1,2,3,4];n.length;){var e=A(n),t=w[e],r=d(t.length);c(t.length,t.name,r)}}}},z=function(n){return{getName:function(){return n},board:j(),attack:function(n,e){return n.board.receiveAttack(e)}}};function I(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}var L=document.getElementById("player-board"),O=document.getElementById("ai-board"),T=document.getElementById("turn-display");const D=function(n){var e="realPlayer",t={realPlayer:z(n),AI:z("AI")},r=function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"horizontal";return"horizontal"===t?n[1]+e>10:n[0]+e>10},a=g,o=function(){return e},i=function(){return e="realPlayer"===e?"ai":"realPlayer"},s=function(n){var e=n;T.textContent="realPlayer"===e?"computer's turn":"player's turn"},c=function(n,e){var t;t="realPlayer"===e?O:L,n.forEach((function(n){t.querySelector('[data-x="'.concat(n[0],'"][data-y="').concat(n[1],'"]')).classList.add("sunk")}))},A=function(n,e,t){var r,a=e.hit;e.sunk,e.coords,"realPlayer"===t?r=O.querySelector('.square[data-x="'.concat(n[0],'"][data-y="').concat(n[1],'"]')):"ai"===t&&(r=L.querySelector('.square[data-x="'.concat(n[0],'"][data-y="').concat(n[1],'"]'))),!0===a?r.classList.add("hit"):r.classList.add("missed")};return{startAttack:function(n){n.target.classList.contains("missed")||n.target.classList.contains("hit")||"ai"===o()||t.AI.board.areAllSunk()||t.realPlayer.board.areAllSunk()||(function(n){O.classList.remove("active");var e,r=(e=n.target,[Number(e.dataset.x),Number(e.dataset.y)]),a=t.realPlayer.attack(t.AI,r),l=o();s(l),A(r,a,l),!0===a.sunk&&c(a.coords,l),i()}(n),function(){if(!t.AI.board.areAllSunk()){var n,e=o(),r=(n=a).splice(Math.floor(Math.random()*n.length),1).flat(),l=t.AI.attack(t.realPlayer,r);setTimeout((function(){A(r,l,e),!0===l.sunk&&c(l.coords,e)}),500),setTimeout((function(){s(e)}),700),setTimeout((function(){i(),O.classList.add("active")}),800)}}())},players:t,anchorAShip:function(n,e){if(!r(n,e.length,e.alignment)){var a=function(n,e){for(var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"horizontal",r=[],a=0;a<e;a++)"horizontal"===t?r.push([n[0],n[1]+a]):r.push([n[0]+a,n[1]]);return r}(n,e.length,e.alignment),o=t.realPlayer.board;if(!function(n,e){var t,r=function(n,e){var t="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=function(n,e){if(n){if("string"==typeof n)return I(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?I(n,e):void 0}}(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var r=0,a=function(){};return{s:a,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return i=n.done,n},e:function(n){s=!0,o=n},f:function(){try{i||null==t.return||t.return()}finally{if(s)throw o}}}}(e);try{for(r.s();!(t=r.n()).done;)if(t.value.ship.getName()===n)return!0}catch(n){r.e(n)}finally{r.f()}return!1}(e.name,o.shipList)&&!o.isInIllegalCoords(a))return o.placeShip(e.length,e.name,a),a}},canStartGame:function(){return 5===t.realPlayer.board.shipList.length},isOutOfBounds:r,isGameOver:function(){return t.AI.board.areAllSunk()||t.realPlayer.board.areAllSunk()},getTurn:o}};var P=document.getElementById("ai-board"),q=document.getElementById("player-board"),U=document.getElementById("place-ship-board"),Y=document.getElementById("ships-container"),M=document.querySelector("#start"),N=document.querySelector("#board-reset"),R=document.querySelector("#game-reset"),Z=document.querySelector("#alignment-btn"),W=document.querySelector("#overlay"),F=document.querySelector("#board-creator"),$=document.querySelector("#gameover-display"),G=document.querySelector("#gameover-result"),X=D("test");Z.addEventListener("click",(function(){var n=Y.firstElementChild.dataset.alignment,e=Array.from(Y.children);"horizontal"===n?(n="vertical",e.forEach((function(e){e.dataset.alignment=n,e.classList.add("vertical")}))):e.forEach((function(e){n="horizontal",e.dataset.alignment=n,e.classList.remove("vertical")}))}));M.addEventListener("click",(function(){X.canStartGame()&&(F.classList.remove("active"),W.classList.remove("active"),P.classList.add("active"),X.players.realPlayer.board.shipList.forEach((function(n){n.coordinates.forEach((function(n){q.querySelector('[data-x="'.concat(n[0],'"][data-y="').concat(n[1],'"]')).classList.add("anchored")}))})),X.players.AI.board.randomlyPlaceShips(),P.addEventListener("mousedown",(function(n){!X.isGameOver()&&"ai"!==X.getTurn()&&n.target.classList.contains("square")&&(X.startAttack(n),X.isGameOver()&&(X.players.AI.board.areAllSunk()?G.textContent="You won":G.textContent="AI won",$.classList.add("active"),W.classList.add("active")))})))})),Y.addEventListener("dragstart",(function(n){n.target.classList.contains("ship")&&(n.dataTransfer.setData("ship-length",n.target.dataset.length),n.dataTransfer.setData("ship-name",n.target.id),n.dataTransfer.setData("ship-alignment",n.target.dataset.alignment))})),U.addEventListener("dragover",(function(n){"place-ship-board"===n.target.id||n.target.classList.contains("anchored")||(n.target.classList.add("dragover"),n.preventDefault())})),U.addEventListener("dragleave",(function(n){"place-ship-board"!==n.target.id&&(n.target.classList.remove("dragover"),n.preventDefault())})),U.addEventListener("drop",(function(n){n.target.classList.remove("dragover");var e={length:Number(n.dataTransfer.getData("ship-length")),name:n.dataTransfer.getData("ship-name"),alignment:n.dataTransfer.getData("ship-alignment")},t=[Number(n.target.dataset.x),Number(n.target.dataset.y)],r=X.anchorAShip(t,e);r&&(r.forEach((function(n){U.querySelector('[data-x="'.concat(n[0],'"][data-y="').concat(n[1],'"]')).classList.add("anchored")})),document.querySelector("#".concat(e.name)).classList.add("removed"))}));var Q=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document,t=Array.from(e.querySelectorAll(".".concat(n)));t.forEach((function(e){return e.classList.remove(n)}))},V=function(){X=D("test"),Q("anchored"),Q("removed",Y)};N.addEventListener("click",(function(){V()})),R.addEventListener("click",(function(){V(),Q("hit"),Q("missed"),Q("sunk"),$.classList.remove("active"),F.classList.add("active")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,