(()=>{var t={183:()=>{var t=document.querySelectorAll(".ship");Array.from(t).forEach((function(t){var e=Number(t.dataset.length);t.setAttribute("draggable","true"),t.dataset.alignment="horizontal";for(var r=0;r<e;r+=1){var n=document.createElement("div");n.classList.add("block"),t.appendChild(n)}}))},307:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",a=9007199254740991,o="[object Arguments]",i="[object Array]",c="[object Boolean]",u="[object Date]",s="[object Error]",l="[object Function]",f="[object Map]",d="[object Number]",h="[object Object]",v="[object Promise]",y="[object RegExp]",p="[object Set]",g="[object String]",m="[object WeakMap]",b="[object ArrayBuffer]",_="[object DataView]",A=/^\[object .+?Constructor\]$/,S=/^(?:0|[1-9]\d*)$/,j={};j["[object Float32Array]"]=j["[object Float64Array]"]=j["[object Int8Array]"]=j["[object Int16Array]"]=j["[object Int32Array]"]=j["[object Uint8Array]"]=j["[object Uint8ClampedArray]"]=j["[object Uint16Array]"]=j["[object Uint32Array]"]=!0,j[o]=j[i]=j[b]=j[c]=j[_]=j[u]=j[s]=j[l]=j[f]=j[d]=j[h]=j[y]=j[p]=j[g]=j[m]=!1;var w="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,L="object"==typeof self&&self&&self.Object===Object&&self,E=w||L||Function("return this")(),k=e&&!e.nodeType&&e,I=k&&t&&!t.nodeType&&t,z=I&&I.exports===k,O=z&&w.process,P=function(){try{return O&&O.binding&&O.binding("util")}catch(t){}}(),x=P&&P.isTypedArray;function T(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function q(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function M(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var B,C,N,D=Array.prototype,$=Function.prototype,F=Object.prototype,U=E["__core-js_shared__"],G=$.toString,R=F.hasOwnProperty,V=(B=/[^.]+$/.exec(U&&U.keys&&U.keys.IE_PROTO||""))?"Symbol(src)_1."+B:"",W=F.toString,H=RegExp("^"+G.call(R).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=z?E.Buffer:void 0,J=E.Symbol,K=E.Uint8Array,Q=F.propertyIsEnumerable,X=D.splice,Z=J?J.toStringTag:void 0,tt=Object.getOwnPropertySymbols,et=Y?Y.isBuffer:void 0,rt=(C=Object.keys,N=Object,function(t){return C(N(t))}),nt=It(E,"DataView"),at=It(E,"Map"),ot=It(E,"Promise"),it=It(E,"Set"),ct=It(E,"WeakMap"),ut=It(Object,"create"),st=xt(nt),lt=xt(at),ft=xt(ot),dt=xt(it),ht=xt(ct),vt=J?J.prototype:void 0,yt=vt?vt.valueOf:void 0;function pt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function gt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function mt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function bt(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new mt;++e<r;)this.add(t[e])}function _t(t){var e=this.__data__=new gt(t);this.size=e.size}function At(t,e){for(var r=t.length;r--;)if(Tt(t[r][0],e))return r;return-1}function St(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Z&&Z in Object(t)?function(t){var e=R.call(t,Z),r=t[Z];try{t[Z]=void 0;var n=!0}catch(t){}var a=W.call(t);return n&&(e?t[Z]=r:delete t[Z]),a}(t):function(t){return W.call(t)}(t)}function jt(t){return $t(t)&&St(t)==o}function wt(t,e,r,n,a){return t===e||(null==t||null==e||!$t(t)&&!$t(e)?t!=t&&e!=e:function(t,e,r,n,a,l){var v=Mt(t),m=Mt(e),A=v?i:Ot(t),S=m?i:Ot(e),j=(A=A==o?h:A)==h,w=(S=S==o?h:S)==h,L=A==S;if(L&&Bt(t)){if(!Bt(e))return!1;v=!0,j=!1}if(L&&!j)return l||(l=new _t),v||Ft(t)?Lt(t,e,r,n,a,l):function(t,e,r,n,a,o,i){switch(r){case _:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case b:return!(t.byteLength!=e.byteLength||!o(new K(t),new K(e)));case c:case u:case d:return Tt(+t,+e);case s:return t.name==e.name&&t.message==e.message;case y:case g:return t==e+"";case f:var l=q;case p:var h=1&n;if(l||(l=M),t.size!=e.size&&!h)return!1;var v=i.get(t);if(v)return v==e;n|=2,i.set(t,e);var m=Lt(l(t),l(e),n,a,o,i);return i.delete(t),m;case"[object Symbol]":if(yt)return yt.call(t)==yt.call(e)}return!1}(t,e,A,r,n,a,l);if(!(1&r)){var E=j&&R.call(t,"__wrapped__"),k=w&&R.call(e,"__wrapped__");if(E||k){var I=E?t.value():t,z=k?e.value():e;return l||(l=new _t),a(I,z,r,n,l)}}return!!L&&(l||(l=new _t),function(t,e,r,n,a,o){var i=1&r,c=Et(t),u=c.length;if(u!=Et(e).length&&!i)return!1;for(var s=u;s--;){var l=c[s];if(!(i?l in e:R.call(e,l)))return!1}var f=o.get(t);if(f&&o.get(e))return f==e;var d=!0;o.set(t,e),o.set(e,t);for(var h=i;++s<u;){var v=t[l=c[s]],y=e[l];if(n)var p=i?n(y,v,l,e,t,o):n(v,y,l,t,e,o);if(!(void 0===p?v===y||a(v,y,r,n,o):p)){d=!1;break}h||(h="constructor"==l)}if(d&&!h){var g=t.constructor,m=e.constructor;g==m||!("constructor"in t)||!("constructor"in e)||"function"==typeof g&&g instanceof g&&"function"==typeof m&&m instanceof m||(d=!1)}return o.delete(t),o.delete(e),d}(t,e,r,n,a,l))}(t,e,r,n,wt,a))}function Lt(t,e,r,n,a,o){var i=1&r,c=t.length,u=e.length;if(c!=u&&!(i&&u>c))return!1;var s=o.get(t);if(s&&o.get(e))return s==e;var l=-1,f=!0,d=2&r?new bt:void 0;for(o.set(t,e),o.set(e,t);++l<c;){var h=t[l],v=e[l];if(n)var y=i?n(v,h,l,e,t,o):n(h,v,l,t,e,o);if(void 0!==y){if(y)continue;f=!1;break}if(d){if(!T(e,(function(t,e){if(i=e,!d.has(i)&&(h===t||a(h,t,r,n,o)))return d.push(e);var i}))){f=!1;break}}else if(h!==v&&!a(h,v,r,n,o)){f=!1;break}}return o.delete(t),o.delete(e),f}function Et(t){return function(t,e,r){var n=e(t);return Mt(t)?n:function(t,e){for(var r=-1,n=e.length,a=t.length;++r<n;)t[a+r]=e[r];return t}(n,r(t))}(t,Ut,zt)}function kt(t,e){var r,n,a=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?a["string"==typeof e?"string":"hash"]:a.map}function It(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Dt(t)||function(t){return!!V&&V in t}(t))&&(Ct(t)?H:A).test(xt(t))}(r)?r:void 0}pt.prototype.clear=function(){this.__data__=ut?ut(null):{},this.size=0},pt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},pt.prototype.get=function(t){var e=this.__data__;if(ut){var r=e[t];return r===n?void 0:r}return R.call(e,t)?e[t]:void 0},pt.prototype.has=function(t){var e=this.__data__;return ut?void 0!==e[t]:R.call(e,t)},pt.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=ut&&void 0===e?n:e,this},gt.prototype.clear=function(){this.__data__=[],this.size=0},gt.prototype.delete=function(t){var e=this.__data__,r=At(e,t);return!(r<0||(r==e.length-1?e.pop():X.call(e,r,1),--this.size,0))},gt.prototype.get=function(t){var e=this.__data__,r=At(e,t);return r<0?void 0:e[r][1]},gt.prototype.has=function(t){return At(this.__data__,t)>-1},gt.prototype.set=function(t,e){var r=this.__data__,n=At(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},mt.prototype.clear=function(){this.size=0,this.__data__={hash:new pt,map:new(at||gt),string:new pt}},mt.prototype.delete=function(t){var e=kt(this,t).delete(t);return this.size-=e?1:0,e},mt.prototype.get=function(t){return kt(this,t).get(t)},mt.prototype.has=function(t){return kt(this,t).has(t)},mt.prototype.set=function(t,e){var r=kt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},bt.prototype.add=bt.prototype.push=function(t){return this.__data__.set(t,n),this},bt.prototype.has=function(t){return this.__data__.has(t)},_t.prototype.clear=function(){this.__data__=new gt,this.size=0},_t.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},_t.prototype.get=function(t){return this.__data__.get(t)},_t.prototype.has=function(t){return this.__data__.has(t)},_t.prototype.set=function(t,e){var r=this.__data__;if(r instanceof gt){var n=r.__data__;if(!at||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new mt(n)}return r.set(t,e),this.size=r.size,this};var zt=tt?function(t){return null==t?[]:(t=Object(t),function(e,r){for(var n=-1,a=null==e?0:e.length,o=0,i=[];++n<a;){var c=e[n];u=c,Q.call(t,u)&&(i[o++]=c)}var u;return i}(tt(t)))}:function(){return[]},Ot=St;function Pt(t,e){return!!(e=null==e?a:e)&&("number"==typeof t||S.test(t))&&t>-1&&t%1==0&&t<e}function xt(t){if(null!=t){try{return G.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Tt(t,e){return t===e||t!=t&&e!=e}(nt&&Ot(new nt(new ArrayBuffer(1)))!=_||at&&Ot(new at)!=f||ot&&Ot(ot.resolve())!=v||it&&Ot(new it)!=p||ct&&Ot(new ct)!=m)&&(Ot=function(t){var e=St(t),r=e==h?t.constructor:void 0,n=r?xt(r):"";if(n)switch(n){case st:return _;case lt:return f;case ft:return v;case dt:return p;case ht:return m}return e});var qt=jt(function(){return arguments}())?jt:function(t){return $t(t)&&R.call(t,"callee")&&!Q.call(t,"callee")},Mt=Array.isArray,Bt=et||function(){return!1};function Ct(t){if(!Dt(t))return!1;var e=St(t);return e==l||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Nt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=a}function Dt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function $t(t){return null!=t&&"object"==typeof t}var Ft=x?function(t){return function(e){return t(e)}}(x):function(t){return $t(t)&&Nt(t.length)&&!!j[St(t)]};function Ut(t){return null!=(e=t)&&Nt(e.length)&&!Ct(e)?function(t,e){var r=Mt(t),n=!r&&qt(t),a=!r&&!n&&Bt(t),o=!r&&!n&&!a&&Ft(t),i=r||n||a||o,c=i?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=c.length;for(var s in t)!e&&!R.call(t,s)||i&&("length"==s||a&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Pt(s,u))||c.push(s);return c}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||F))return rt(t);var e,r,n=[];for(var a in Object(t))R.call(t,a)&&"constructor"!=a&&n.push(a);return n}(t);var e}t.exports=function(t,e){return wt(t,e)}}},e={};function r(n){var a=e[n];if(void 0!==a)return a.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n](o,o.exports,r),o.loaded=!0,o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";const t=function(){for(var t=[],e=0;e<10;e++)for(var r=e,n=0;n<10;n++){var a=n;t.push([r,a])}return t}();var e=document.getElementById("player-board"),n=document.getElementById("ai-board"),a=document.getElementById("place-ship-board");t.forEach((function(t){var r=document.createElement("div");r.classList.add("square"),r.dataset.x=t[0],r.dataset.y=t[1],e.appendChild(r);var o=r.cloneNode();n.appendChild(o);var i=r.cloneNode();a.appendChild(i)})),r(183);var o=r(307),i=r.n(o);const c=function(t,e){var r=0;return{getLength:function(){return t},getName:function(){return e},hit:function(){r+=1},getHitsTaken:function(){return r},isSunk:function(){return r>=t}}};var u=[[0,-1],[-1,-1],[1,-1],[-1,0],[1,0],[0,1],[-1,1],[1,1]],s=[{name:"destroyer",length:2},{name:"submarine",length:3},{name:"cruiser",length:3},{name:"battleship",length:4},{name:"carrier",length:5}];function l(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=f(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,a=function(){};return{s:a,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){c=!0,o=t},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw o}}}}function f(t,e){if(t){if("string"==typeof t)return d(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?d(t,e):void 0}}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const h=function(){var e,r=function(t){if(Array.isArray(t))return d(t)}(e=t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||f(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),n=[],a=new Set,o=new Set,h=function(t,e){return t.some((function(t){return i()(t,e)}))},v=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o;t.forEach((function(n){for(var a=0;a<e.length;a++){var o=e[a],i=[n[0]+o[0],n[1]+o[1]];i[0]>=0&&i[0]<=9&&i[1]>=0&&i[1]<=9&&!1===h(t,i)&&r.add(String(i))}r.add(String(n))}))},y=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o,n=l(t);try{for(n.s();!(e=n.n()).done;){var a=e.value;if(r.has(String(a)))return!0}}catch(t){n.e(t)}finally{n.f()}return!1},p=function(t,e,r){var a={ship:c(t,e),coordinates:r};n.push(a),v(r,u,o)},g=function(t){return t.splice(Math.floor(Math.random()*t.length),1)},m=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["horizontal","vertical"];return t[Math.floor(2*Math.random())]},b=function(t,e){for(var n;void 0===n||o.has(String(n));)if("horizontal"===e){var a=r[Math.floor(Math.random()*(r.length-t))];a[1]+t<=10&&(n=a)}else{var i=r[Math.floor(Math.random()*(10*(t+1)))];i[0]+t<=10&&(n=i)}return n},_=function(t){for(var e=[];e.length<=1;){var r=m(),n=b(t,r);e.push(n);for(var a=1;a<t;a++)"horizontal"===r?e.push([n[0],n[1]+a]):e.push([n[0]+a,n[1]]);y(e)&&e.splice(0)}return v(e),e};return{shipList:n,placeShip:p,receiveAttack:function(t){var e=function(t){var e,r=0,a=l(n);try{for(a.s();!(e=a.n()).done;){if(e.value.coordinates.some((function(e){return i()(t,e)})))return r;r+=1}}catch(t){a.e(t)}finally{a.f()}}(t);if(void 0!==e){var r=n[e];return r.ship.hit(),r.ship.isSunk()?{hit:!0,sunk:!0,coords:r.coordinates}:{hit:!0,sunk:!1,coords:null}}return a.add(String(t)),{hit:!1,sunk:!1,coords:null}},missedShots:a,areAllSunk:function(){return n.every((function(t){return t.ship.isSunk()}))},unavailableCoords:o,isInIllegalCoords:y,randomlyPlaceShips:function(){for(var t=[0,1,2,3,4];t.length;){var e=g(t),r=s[e],n=_(r.length);p(r.length,r.name,n)}}}},v=function(t){return{getName:function(){return t},board:h(),attack:function(t,e){return t.board.receiveAttack(e)}}};function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var p=document.getElementById("player-board"),g=document.getElementById("ai-board"),m=document.getElementById("turn-display");const b=function(e){var r="realPlayer",n={realPlayer:v(e),AI:v("AI")},a=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"horizontal";return"horizontal"===r?t[1]+e>10:t[0]+e>10},o=t,i=function(){return r},c=function(){return r="realPlayer"===r?"ai":"realPlayer"},u=function(t){var e=t;m.textContent="realPlayer"===e?"computer's turn":"player's turn"},s=function(t,e){var r;r="realPlayer"===e?g:p,t.forEach((function(t){r.querySelector('[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')).classList.add("sunk")}))},l=function(t,e,r){var n,a=e.hit;e.sunk,e.coords,"realPlayer"===r?n=g.querySelector('.square[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')):"ai"===r&&(n=p.querySelector('.square[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]'))),!0===a?n.classList.add("hit"):n.classList.add("missed")};return{startAttack:function(t){t.target.classList.contains("missed")||t.target.classList.contains("hit")||"ai"===i()||n.AI.board.areAllSunk()||n.realPlayer.board.areAllSunk()||(function(t){g.classList.remove("active");var e,r=(e=t.target,[Number(e.dataset.x),Number(e.dataset.y)]),a=n.realPlayer.attack(n.AI,r),o=i();u(o),l(r,a,o),!0===a.sunk&&s(a.coords,o),c()}(t),function(){if(!n.AI.board.areAllSunk()){var t,e=i(),r=(t=o).splice(Math.floor(Math.random()*t.length),1).flat(),a=n.AI.attack(n.realPlayer,r);setTimeout((function(){l(r,a,e),!0===a.sunk&&s(a.coords,e)}),500),setTimeout((function(){u(e)}),700),setTimeout((function(){c(),g.classList.add("active")}),800)}}())},players:n,anchorAShip:function(t,e){if(!a(t,e.length,e.alignment)){var r=function(t,e){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"horizontal",n=[],a=0;a<e;a++)"horizontal"===r?n.push([t[0],t[1]+a]):n.push([t[0]+a,t[1]]);return n}(t,e.length,e.alignment),o=n.realPlayer.board;if(!function(t,e){var r,n=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return y(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?y(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,a=function(){};return{s:a,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){c=!0,o=t},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw o}}}}(e);try{for(n.s();!(r=n.n()).done;)if(r.value.ship.getName()===t)return!0}catch(t){n.e(t)}finally{n.f()}return!1}(e.name,o.shipList)&&!o.isInIllegalCoords(r))return o.placeShip(e.length,e.name,r),r}},canStartGame:function(){return 5===n.realPlayer.board.shipList.length},isOutOfBounds:a,isGameOver:function(){return n.AI.board.areAllSunk()||n.realPlayer.board.areAllSunk()},getTurn:i}};var _=document.getElementById("ai-board"),A=document.getElementById("player-board"),S=document.getElementById("place-ship-board"),j=document.getElementById("ships-container"),w=document.querySelector("#start"),L=document.querySelector("#board-reset"),E=document.querySelector("#game-reset"),k=document.querySelector("#alignment-btn"),I=document.querySelector("#overlay"),z=document.querySelector("#board-creator"),O=document.querySelector("#gameover-display"),P=document.querySelector("#gameover-result"),x=b("test");k.addEventListener("click",(function(){var t=j.firstElementChild.dataset.alignment,e=Array.from(j.children);"horizontal"===t?(t="vertical",e.forEach((function(e){e.dataset.alignment=t,e.classList.add("vertical")}))):e.forEach((function(e){t="horizontal",e.dataset.alignment=t,e.classList.remove("vertical")}))}));w.addEventListener("click",(function(){x.canStartGame()&&(z.classList.remove("active"),I.classList.remove("active"),_.classList.add("active"),x.players.realPlayer.board.shipList.forEach((function(t){t.coordinates.forEach((function(t){A.querySelector('[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')).classList.add("anchored")}))})),x.players.AI.board.randomlyPlaceShips(),_.addEventListener("mousedown",(function(t){!x.isGameOver()&&"ai"!==x.getTurn()&&t.target.classList.contains("square")&&(x.startAttack(t),x.isGameOver()&&(x.players.AI.board.areAllSunk()?P.textContent="You won":P.textContent="AI won",O.classList.add("active"),I.classList.add("active")))})))})),j.addEventListener("dragstart",(function(t){t.target.classList.contains("ship")&&(t.dataTransfer.setData("ship-length",t.target.dataset.length),t.dataTransfer.setData("ship-name",t.target.id),t.dataTransfer.setData("ship-alignment",t.target.dataset.alignment))})),S.addEventListener("dragover",(function(t){"place-ship-board"===t.target.id||t.target.classList.contains("anchored")||(t.target.classList.add("dragover"),t.preventDefault())})),S.addEventListener("dragleave",(function(t){"place-ship-board"!==t.target.id&&(t.target.classList.remove("dragover"),t.preventDefault())})),S.addEventListener("drop",(function(t){t.target.classList.remove("dragover");var e={length:Number(t.dataTransfer.getData("ship-length")),name:t.dataTransfer.getData("ship-name"),alignment:t.dataTransfer.getData("ship-alignment")},r=[Number(t.target.dataset.x),Number(t.target.dataset.y)],n=x.anchorAShip(r,e);n&&(n.forEach((function(t){S.querySelector('[data-x="'.concat(t[0],'"][data-y="').concat(t[1],'"]')).classList.add("anchored")})),document.querySelector("#".concat(e.name)).classList.add("removed"))}));var T=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document,r=Array.from(e.querySelectorAll(".".concat(t)));r.forEach((function(e){return e.classList.remove(t)}))},q=function(){x=b("test"),T("anchored"),T("removed",j)};L.addEventListener("click",(function(){q()})),E.addEventListener("click",(function(){q(),T("hit"),T("missed"),T("sunk"),O.classList.remove("active"),z.classList.add("active")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,